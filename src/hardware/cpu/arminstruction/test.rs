// License below.
#![allow(missing_docs)]

use super::ArmInstruction;
use super::super::super::error::GbaError;
use test::*;

const INSTRUCTIONS: &'static [(u32, &'static str, Result<(), GbaError>)] = &[
    // Use SWI to check condition decoding.
    (0b0000_1111_011101110111011101110111_u32, "0x0F777777\tswieq\t#0x777777", Ok(())),
    (0b0001_1111_011101110111011101110111_u32, "0x1F777777\tswine\t#0x777777", Ok(())),
    (0b0010_1111_011101110111011101110111_u32, "0x2F777777\tswihs\t#0x777777", Ok(())),
    (0b0011_1111_011101110111011101110111_u32, "0x3F777777\tswilo\t#0x777777", Ok(())),
    (0b0100_1111_011101110111011101110111_u32, "0x4F777777\tswimi\t#0x777777", Ok(())),
    (0b0101_1111_011101110111011101110111_u32, "0x5F777777\tswipl\t#0x777777", Ok(())),
    (0b0110_1111_011101110111011101110111_u32, "0x6F777777\tswivs\t#0x777777", Ok(())),
    (0b0111_1111_011101110111011101110111_u32, "0x7F777777\tswivc\t#0x777777", Ok(())),
    (0b1000_1111_011101110111011101110111_u32, "0x8F777777\tswihi\t#0x777777", Ok(())),
    (0b1001_1111_011101110111011101110111_u32, "0x9F777777\tswils\t#0x777777", Ok(())),
    (0b1010_1111_011101110111011101110111_u32, "0xAF777777\tswige\t#0x777777", Ok(())),
    (0b1011_1111_011101110111011101110111_u32, "0xBF777777\tswilt\t#0x777777", Ok(())),
    (0b1100_1111_011101110111011101110111_u32, "0xCF777777\tswigt\t#0x777777", Ok(())),
    (0b1101_1111_011101110111011101110111_u32, "0xDF777777\tswile\t#0x777777", Ok(())),
    (0b1110_1111_011101110111011101110111_u32, "0xEF777777\tswi\t#0x777777",   Ok(())),
    (0b1111_1111_011101110111011101110111_u32, "0xFF777777\tswinv\t#0x777777", Ok(())),

    // Test BX, B, BL.
    (0b0000_000100101111111111110001_0111_u32,  "0x012FFF17\tbxeq\tR7",  Ok(())),
    (0b0000_000100101111111111110001_1100_u32,  "0x012FFF1C\tbxeq\tR12", Ok(())),
    (0b0000_000100101111111111110001_1101_u32,  "0x012FFF1D\tbxeq\tSP",  Ok(())),
    (0b0000_000100101111111111110001_1110_u32,  "0x012FFF1E\tbxeq\tLR",  Ok(())),
    (0b0000_000100101111111111110001_1111_u32,  "0x012FFF1F\tbxeq\tPC",  Ok(())),
    (0b0000_101_0_111111111111111111111101_u32, "0x0AFFFFFD\tbeq\t#-4",  Ok(())),
    (0b0000_101_0_000000000000000000000001_u32, "0x0A000001\tbeq\t#12",  Ok(())),
    (0b0000_101_1_111111111111111111111101_u32, "0x0BFFFFFD\tbleq\t#-4", Ok(())),
    (0b0000_101_1_000000000000000000000001_u32, "0x0B000001\tbleq\t#12", Ok(())),

    // Test Unknown.
    (0b0000_011_01100110011001100110_1_0110_u32, "0x06CCCCD6\t<unknown>", Ok(())),

    // Data Processing.
    (0b0000_00_1_0000_0_0001_0010_0011_01000101_u32,    "0x02012345\tandeq\tR2, R1, #335544321", Ok(())),
    (0b0000_00_0_0001_1_0001_0010_00111_00_0_0011_u32,  "0x00312383\teorseq\tR2, R1, R3, lsl #7", Ok(())),
    (0b0000_00_0_0010_0_0001_0010_00111_01_0_0011_u32,  "0x004123A3\tsubeq\tR2, R1, R3, lsr #7", Ok(())),
    (0b0000_00_0_0011_0_0001_0010_00111_10_0_0011_u32,  "0x006123C3\trsbeq\tR2, R1, R3, asr #7", Ok(())),
    (0b0000_00_0_0100_0_0001_0010_00111_11_0_0011_u32,  "0x008123E3\taddeq\tR2, R1, R3, ror #7", Ok(())),
    (0b0000_00_0_0101_0_0001_0010_00000_11_0_0011_u32,  "0x00A12063\tadceq\tR2, R1, R3, rrx", Ok(())),
    (0b0000_00_0_0110_0_0001_0010_00000_00_0_0011_u32,  "0x00C12003\tsbceq\tR2, R1, R3", Ok(())),
    (0b0000_00_0_0111_0_0001_0010_0100_0_00_1_0011_u32, "0x00E12413\trsceq\tR2, R1, R3, lsl R4", Ok(())),
    (0b0000_00_0_1000_0_0001_0010_0100_0_01_1_0011_u32, "0x01012433\ttsteq\tR1, R3, lsr R4", Ok(())), // TODO add tests for S bit
    (0b0000_00_0_1001_0_0001_0010_0100_0_10_1_0011_u32, "0x01212453\tteqeq\tR1, R3, asr R4", Ok(())),
    (0b0000_00_0_1010_0_0001_0010_0100_0_11_1_0011_u32, "0x01412473\tcmpeq\tR1, R3, ror R4", Ok(())),
    (0b0000_00_0_1011_0_0001_0010_00000_00_0_0011_u32,  "0x01612003\tcmneq\tR1, R3", Ok(())),
    (0b0000_00_0_1100_0_0001_0010_00000_00_0_0011_u32,  "0x01812003\torreq\tR2, R1, R3", Ok(())),
    (0b0000_00_0_1101_0_0001_0010_00000_00_0_0011_u32,  "0x01A12003\tmoveq\tR2, R3", Ok(())),
    (0b0000_00_0_1110_0_0001_0010_00000_00_0_0011_u32,  "0x01C12003\tbiceq\tR2, R1, R3", Ok(())),
    (0b0000_00_0_1111_0_0001_0010_00000_00_0_0011_u32,  "0x01E12003\tmvneq\tR2, R3", Ok(())),

    // MRS and MSR.
    (0b0000_00010_0_001111_0001_000000000000_u32,   "0x010F1000\tmrseq\tR1, CPSR", Ok(())),
    (0b0000_00010_1_001111_0001_000000000000_u32,   "0x014F1000\tmrseq\tR1, SPSR", Ok(())),
    (0b0000_00010_0_101001111100000000_0010_u32,    "0x0129F002\tmsreq\tCPSR, R2", Ok(())),
    (0b0000_00_0_10_0_1010001111_00000000_0111_u32, "0x0128F007\tmsreq\tCPSR_flg, R7", Ok(())),
    (0b0000_00_0_10_1_1010001111_11111111_0111_u32, "0x0168FFF7\tmsreq\tSPSR_flg, R7", Ok(())),
    (0b0000_00_1_10_0_1010001111_0010_00001111_u32, "0x0328F20F\tmsreq\tCPSR_flg, #0xF0000000", Ok(())),

    // Test MUL and MLA.
    (0b0000_000000_0_0_0001_0010_0011_1001_0100_u32, "0x00012394\tmuleq\tR1, R4, R3", Ok(())),
    (0b0000_000000_0_1_0001_0010_0011_1001_0100_u32, "0x00112394\tmulseq\tR1, R4, R3", Ok(())),
    (0b0000_000000_1_0_0001_0010_0011_1001_0100_u32, "0x00212394\tmlaeq\tR1, R4, R3, R2", Ok(())),
    (0b0000_000000_1_1_0001_0010_0011_1001_0100_u32, "0x00312394\tmlaseq\tR1, R4, R3, R2", Ok(())),

    // Test MULL and MLAL.
    (0b0000_00001_0_0_0_0001_0010_0011_1001_0100_u32, "0x00812394\tumulleq\tR2, R1, R4, R3", Ok(())),
    (0b0000_00001_0_0_1_0001_0010_0011_1001_0100_u32, "0x00912394\tumullseq\tR2, R1, R4, R3", Ok(())),
    (0b0000_00001_0_1_0_0001_0010_0011_1001_0100_u32, "0x00A12394\tumlaleq\tR2, R1, R4, R3", Ok(())),
    (0b0000_00001_0_1_1_0001_0010_0011_1001_0100_u32, "0x00B12394\tumlalseq\tR2, R1, R4, R3", Ok(())),
    (0b0000_00001_1_0_0_0001_0010_0011_1001_0100_u32, "0x00C12394\tsmulleq\tR2, R1, R4, R3", Ok(())),
    (0b0000_00001_1_0_1_0001_0010_0011_1001_0100_u32, "0x00D12394\tsmullseq\tR2, R1, R4, R3", Ok(())),
    (0b0000_00001_1_1_0_0001_0010_0011_1001_0100_u32, "0x00E12394\tsmlaleq\tR2, R1, R4, R3", Ok(())),
    (0b0000_00001_1_1_1_0001_0010_0011_1001_0100_u32, "0x00F12394\tsmlalseq\tR2, R1, R4, R3", Ok(())),

    // Test LDR and STR.
    (0b0000_01_0_0_0_0_0_0_0001_0010_011101110111_u32, "0x04012777\tstreq\tR2, [R1], #-1911", Ok(())),
    (0b0000_01_0_0_0_0_0_1_0001_0010_011101110111_u32, "0x04112777\tldreq\tR2, [R1], #-1911", Ok(())),
    (0b0000_01_0_0_0_0_1_0_0001_0010_011101110111_u32, "0x04212777\tstrteq\tR2, [R1], #-1911", Ok(())),
    (0b0000_01_0_0_0_0_1_1_0001_0010_011101110111_u32, "0x04312777\tldrteq\tR2, [R1], #-1911", Ok(())),
    (0b0000_01_0_0_0_1_0_0_0001_0010_011101110111_u32, "0x04412777\tstrbeq\tR2, [R1], #-1911", Ok(())),
    (0b0000_01_0_0_0_1_0_1_0001_0010_011101110111_u32, "0x04512777\tldrbeq\tR2, [R1], #-1911", Ok(())),
    (0b0000_01_0_0_0_1_1_0_0001_0010_011101110111_u32, "0x04612777\tstrbteq\tR2, [R1], #-1911", Ok(())),
    (0b0000_01_0_0_0_1_1_1_0001_0010_011101110111_u32, "0x04712777\tldrbteq\tR2, [R1], #-1911", Ok(())),
    (0b0000_01_0_0_1_0_0_0_0001_0010_011101110111_u32, "0x04812777\tstreq\tR2, [R1], #+1911", Ok(())),
    (0b0000_01_0_0_1_0_0_1_0001_0010_011101110111_u32, "0x04912777\tldreq\tR2, [R1], #+1911", Ok(())),
    (0b0000_01_0_0_1_0_1_0_0001_0010_011101110111_u32, "0x04A12777\tstrteq\tR2, [R1], #+1911", Ok(())),
    (0b0000_01_0_0_1_0_1_1_0001_0010_011101110111_u32, "0x04B12777\tldrteq\tR2, [R1], #+1911", Ok(())),
    (0b0000_01_0_0_1_1_0_0_0001_0010_011101110111_u32, "0x04C12777\tstrbeq\tR2, [R1], #+1911", Ok(())),
    (0b0000_01_0_0_1_1_0_1_0001_0010_011101110111_u32, "0x04D12777\tldrbeq\tR2, [R1], #+1911", Ok(())),
    (0b0000_01_0_0_1_1_1_0_0001_0010_011101110111_u32, "0x04E12777\tstrbteq\tR2, [R1], #+1911", Ok(())),
    (0b0000_01_0_0_1_1_1_1_0001_0010_011101110111_u32, "0x04F12777\tldrbteq\tR2, [R1], #+1911", Ok(())),
    (0b0000_01_0_1_0_0_0_0_0001_0010_011101110111_u32, "0x05012777\tstreq\tR2, [R1, #-1911]", Ok(())),
    (0b0000_01_0_1_0_0_0_1_0001_0010_011101110111_u32, "0x05112777\tldreq\tR2, [R1, #-1911]", Ok(())),
    (0b0000_01_0_1_0_0_1_0_0001_0010_011101110111_u32, "0x05212777\tstreq\tR2, [R1, #-1911]!", Ok(())),
    (0b0000_01_0_1_0_0_1_1_0001_0010_011101110111_u32, "0x05312777\tldreq\tR2, [R1, #-1911]!", Ok(())),
    (0b0000_01_0_1_0_1_0_0_0001_0010_011101110111_u32, "0x05412777\tstrbeq\tR2, [R1, #-1911]", Ok(())),
    (0b0000_01_0_1_0_1_0_1_0001_0010_011101110111_u32, "0x05512777\tldrbeq\tR2, [R1, #-1911]", Ok(())),
    (0b0000_01_0_1_0_1_1_0_0001_0010_011101110111_u32, "0x05612777\tstrbeq\tR2, [R1, #-1911]!", Ok(())),
    (0b0000_01_0_1_0_1_1_1_0001_0010_011101110111_u32, "0x05712777\tldrbeq\tR2, [R1, #-1911]!", Ok(())),
    (0b0000_01_0_1_1_0_0_0_0001_0010_011101110111_u32, "0x05812777\tstreq\tR2, [R1, #+1911]", Ok(())),
    (0b0000_01_0_1_1_0_0_1_0001_0010_011101110111_u32, "0x05912777\tldreq\tR2, [R1, #+1911]", Ok(())),
    (0b0000_01_0_1_1_0_1_0_0001_0010_011101110111_u32, "0x05A12777\tstreq\tR2, [R1, #+1911]!", Ok(())),
    (0b0000_01_0_1_1_0_1_1_0001_0010_011101110111_u32, "0x05B12777\tldreq\tR2, [R1, #+1911]!", Ok(())),
    (0b0000_01_0_1_1_1_0_0_0001_0010_011101110111_u32, "0x05C12777\tstrbeq\tR2, [R1, #+1911]", Ok(())),
    (0b0000_01_0_1_1_1_0_1_0001_0010_011101110111_u32, "0x05D12777\tldrbeq\tR2, [R1, #+1911]", Ok(())),
    (0b0000_01_0_1_1_1_1_0_0001_0010_011101110111_u32, "0x05E12777\tstrbeq\tR2, [R1, #+1911]!", Ok(())),
    (0b0000_01_0_1_1_1_1_1_0001_0010_011101110111_u32, "0x05F12777\tldrbeq\tR2, [R1, #+1911]!", Ok(())),
    (0b0000_01_1_1_1_0_0_0_0001_0010_00000_00_0_0011_u32, "0x07812003\tstreq\tR2, [R1, +R3]", Ok(())),
    (0b0000_01_1_1_1_0_0_0_0001_0010_00111_00_0_0011_u32, "0x07812383\tstreq\tR2, [R1, +R3, lsl #7]", Ok(())),
    (0b0000_01_1_1_1_0_0_0_0001_0010_00111_01_0_0011_u32, "0x078123A3\tstreq\tR2, [R1, +R3, lsr #7]", Ok(())),
    (0b0000_01_1_1_0_0_0_0_0001_0010_00111_10_0_0011_u32, "0x070123C3\tstreq\tR2, [R1, -R3, asr #7]", Ok(())),
    (0b0000_01_1_1_0_0_0_0_0001_0010_00111_11_0_0011_u32, "0x070123E3\tstreq\tR2, [R1, -R3, ror #7]", Ok(())),
    (0b0000_01_1_1_0_0_0_0_0001_0010_00000_11_0_0011_u32, "0x07012063\tstreq\tR2, [R1, -R3, rrx]", Ok(())),

    // LDRH/STRH/LDRSB/LDRSH.
    (0b0000_000_0_0_0_0_0_0001_0010_0000_1_01_1_0011_u32, "0x000120B3\tstrheq\tR2, [R1], -R3", Ok(())),
    (0b0000_000_0_0_0_0_1_0001_0010_0000_1_10_1_0011_u32, "0x001120D3\tldrsbeq\tR2, [R1], -R3", Ok(())),
    (0b0000_000_0_0_0_1_0_0001_0010_0000_1_11_1_0011_u32, "0x002120F3\tstrsheq\tR2, [R1], -R3", Err(GbaError::InvalidOffsetWriteBack)),
    (0b0000_000_0_1_0_0_0_0001_0010_0000_1_01_1_0011_u32, "0x008120B3\tstrheq\tR2, [R1], +R3", Ok(())),
    (0b0000_000_1_0_0_0_0_0001_0010_0000_1_10_1_0011_u32, "0x010120D3\tstrsbeq\tR2, [R1, -R3]", Ok(())),
    (0b0000_000_1_0_0_1_0_0001_0010_0000_1_11_1_0011_u32, "0x012120F3\tstrsheq\tR2, [R1, -R3]!", Ok(())),
    (0b0000_000_0_0_1_0_0_0001_0010_0011_1_01_1_1100_u32, "0x004123BC\tstrheq\tR2, [R1], #-60", Ok(())),
    (0b0000_000_0_0_1_0_1_0001_0010_0011_1_10_1_1100_u32, "0x005123DC\tldrsbeq\tR2, [R1], #-60", Ok(())),
    (0b0000_000_0_0_1_1_0_0001_0010_0011_1_11_1_1100_u32, "0x006123FC\tstrsheq\tR2, [R1], #-60", Err(GbaError::InvalidOffsetWriteBack)),
    (0b0000_000_0_1_1_0_0_0001_0010_0011_1_01_1_1100_u32, "0x00C123BC\tstrheq\tR2, [R1], #+60", Ok(())),
    (0b0000_000_1_0_1_0_0_0001_0010_0011_1_10_1_1100_u32, "0x014123DC\tstrsbeq\tR2, [R1, #-60]", Ok(())),
    (0b0000_000_1_0_1_1_0_0001_0010_0011_1_11_1_1100_u32, "0x016123FC\tstrsheq\tR2, [R1, #-60]!", Ok(())),

    // LDM and STM.
    (0b0000_100_0_0_0_0_0_0111_1111000000000111_u32, "0x0807F007\tstmdaeq\tR7, {R0, R1, R2, R12, SP, LR, PC}", Ok(())),
    (0b0000_100_1_1_0_0_1_0111_1111000000000111_u32, "0x0997F007\tldmibeq\tR7, {R0, R1, R2, R12, SP, LR, PC}", Ok(())),
    (0b0000_100_0_0_1_1_0_0111_0000000000000000_u32, "0x08670000\tstmdaeq\tR7!, {}^", Err(GbaError::InvalidOffsetWriteBack)),
    (0b0000_100_1_1_1_1_1_0111_1000000000000001_u32, "0x09F78001\tldmibeq\tR7!, {R0, PC}^", Ok(())),

    // SWP.
    (0b0000_00010_0_00_0001_0010_0000_1001_0011_u32, "0x01012093\tswpeq\tR2, R3, [R1]", Ok(())),
    (0b0000_00010_1_00_0001_0010_0000_1001_0011_u32, "0x01412093\tswpbeq\tR2, R3, [R1]", Ok(())),

    // CDP.
    (0b0000_1110_0111_0001_0010_1100_1100_0011_u32, "0x0E712CC3\tcdpeq\tP12, 7, CR2, CR1, CR3, 6", Ok(())),

    // LDC and STC.
    (0b0000_110_0_0_0_0_0_0001_0010_1000_01110111_u32, "0x0C012877\tstceq\tP8, CR2, [R1], #-119", Ok(())),
    (0b0000_110_0_0_0_1_0_0001_0010_1000_01110111_u32, "0x0C212877\tstceq\tP8, CR2, [R1], #-119", Ok(())),
    (0b0000_110_1_1_1_0_1_0001_0010_1000_01110111_u32, "0x0DD12877\tldcleq\tP8, CR2, [R1, #+119]", Ok(())),
    (0b0000_110_1_1_1_1_1_0001_0010_1000_01110111_u32, "0x0DF12877\tldcleq\tP8, CR2, [R1, #+119]!", Ok(())),

    // MRC and MCR.
    (0b0000_1110_111_0_0001_0010_1000_110_1_0011_u32, "0x0EE128D3\tmcreq\tP8, 7, R2, CR1, CR3, 6", Ok(())),
    (0b0000_1110_111_1_0001_0010_1000_110_1_0011_u32, "0x0EF128D3\tmrceq\tP8, 7, R2, CR1, CR3, 6", Ok(())),
];

#[test]
pub fn instruction_disassembly() {
    let mut x = 0;
    for inst in self::INSTRUCTIONS {
        let i = ArmInstruction::decode(inst.0).unwrap();
        println!("Check INSTRUCTIONS[{}] = `{}`", x, i);
        assert_eq!(format!("{}", i), inst.1);
        x += 1;
    }
}

#[test]
pub fn instruction_validity() {
    let mut x = 0;
    for inst in self::INSTRUCTIONS {
        let i = ArmInstruction::decode(inst.0).unwrap();
        println!("Check INSTRUCTIONS[{}] = `{}`", x, i);
        assert_eq!(i.check_is_valid(), inst.2);
        x += 1;
    }
}

#[bench]
pub fn instruction_decoding_and_validity_check_speed(b: &mut Bencher) {
    b.iter(|| for inst in self::INSTRUCTIONS {
        if let Ok(i) = ArmInstruction::decode(inst.0) {
            i.check_is_valid().unwrap_or(());
        }
    });
}


/*
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
*/
